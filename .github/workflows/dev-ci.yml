# This is a basic workflow to help you get started with Actions

name: DEV-CI

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  ci:
    # Meta-job that depends on the other job statuses.  Branch protection then checks this job status.
    name: Deck CI
    needs: [lint, test, build, functional-tests]
    runs-on: ubuntu-latest
    steps:
      - run: echo test, build successful

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION  }}

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn --frozen-lockfile

      - name: Eslint Plugin Build`
        run: |
          cd packages/eslint-plugin
          yarn tsc
          yarn test
      - name: Assert - no lint violations
        run: yarn lint

      - name: Assert - code is formatted
        run: yarn prettier:check

  test:
    name: Unit tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION  }}

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn --frozen-lockfile

      - name: Build Modules
        run: yarn modules

      - name: Unit Tests
        run: yarn test --single-run

  functional-tests:
    name: Functional tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION  }}

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn --frozen-lockfile

      - name: Build Modules
        run: yarn modules

      - name: Functional Tests
        run: yarn functional

  build:
    name: Docker Production
    runs-on: ubuntu-latest
    steps:
      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GCR_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT }}
      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION  }}

      - name: Get yarn cache
        id: yarn-cache
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install Dependencies
        run: yarn --frozen-lockfile

      - name: Build Modules
        run: yarn modules

      - name: Yarn Build
        run: yarn build

      - name: List files
        run: ls -lR

      - name: Docker build
        shell: bash
        env:
          PROJECT_ID: ${{ secrets.GCP_PROJECT }}
        run: >
          TAG_REG=us.gcr.io/$PROJECT_ID/spinnaker &&
          NEW_VERSION=3.7.x.beta$(date '+%m%d%H%M') &&
          docker build -f Dockerfile.slim -t ${TAG_REG}/deck:${NEW_VERSION} . &&
          docker push ${TAG_REG}/deck:${NEW_VERSION}
